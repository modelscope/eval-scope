# Copyright (c) Alibaba, Inc. and its affiliates.
# yapf: disable
# isort:skip_file
# flake8: noqa

import argparse
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from llmuses.constants import EvalTaskConfig, ArenaMode
from llmuses.evaluator.rating_eval import RatingEvaluate
from llmuses.utils.logger import get_logger
from llmuses.utils.utils import get_obj_from_cfg, yaml_to_dict

logger = get_logger()


class ArenaWorkflow:

    def __init__(self, cfg_file: str, **kwargs):

        self.cfg_dict = yaml_to_dict(cfg_file)
        # logger.info(f'Config: {self.cfg_dict}')

        self.question_file: str = self.cfg_dict.get('question_file')

        self.answers_gen: dict = self.cfg_dict.get('answers_gen', {})
        for k in self.answers_gen.keys():
            self.answers_gen[k] = ArenaWorkflow._get_obj_from_cfg(
                self.answers_gen[k])

        self.reviews_gen: dict = self.cfg_dict.get('reviews_gen', {})
        self.reviewer_cfg: dict = ArenaWorkflow._get_obj_from_cfg(
            self.reviews_gen.get('reviewer', {}))
        self.prompt_file = os.path.abspath(self.reviews_gen.get('prompt_file'))
        self.review_file = os.path.abspath(self.reviews_gen.get('review_file'))

        self.rating_gen: dict = self.cfg_dict.get('rating_gen', {})

    @staticmethod
    def _get_obj_from_cfg(obj_cfg: dict):
        cls_ref = obj_cfg.get(EvalTaskConfig.CLASS_REF, None)
        if not cls_ref:
            logger.warning(
                f'Class reference is not specified in config: {obj_cfg}')
            return obj_cfg

        cls = get_obj_from_cfg(cls_ref)
        obj_cfg[EvalTaskConfig.CLASS_REF] = cls

        return obj_cfg

    def get_answers(self):

        for model_name, cfg in self.answers_gen.items():
            enable = cfg.get(EvalTaskConfig.ENABLE, True)
            if not enable:
                logger.info(
                    f'Skip model {model_name} because it is not enabled.')
                continue

            model_cls = cfg.get(EvalTaskConfig.CLASS_REF)
            if not model_cls:
                logger.warning(
                    f'Skip model {model_name} because class reference '
                    f'is not specified.')
                continue
            model_args = cfg.get(EvalTaskConfig.CLASS_ARGS, {})

            input_kwargs = dict()
            input_kwargs['question_file'] = self.question_file
            input_kwargs['output_file'] = cfg.get('output_file')
            input_kwargs.update(model_args)
            model_obj = model_cls(**input_kwargs)

            # model_obj.run_dummy()  # Note: only for test
            model_obj.run()
            logger.info(f'Answers generated by model {model_name} '
                        f'are saved to {input_kwargs["output_file"]}.')

    def get_reviews(self):
        enable = self.reviews_gen.get(EvalTaskConfig.ENABLE, True)
        if enable:
            reviewer_cls = self.reviewer_cfg.get(EvalTaskConfig.CLASS_REF)
            if not reviewer_cls:
                logger.warning('Skip reviews generation because '
                               'class reference is not specified.')
                return
            reviewer_args = self.reviewer_cfg.get(EvalTaskConfig.CLASS_ARGS,
                                                  {})
            target_answers = self.reviews_gen.get('target_answers', [])
            target_answers = [
                os.path.abspath(file_path) for file_path in target_answers
            ]

            baseline_file = self.reviews_gen.get('baseline_file', None)
            if baseline_file:
                baseline_file = os.path.abspath(baseline_file)

            reference_file = self.reviews_gen.get('reference_file', None)
            if reference_file:
                reference_file = os.path.abspath(reference_file)

            cache_file = self.reviews_gen.get('cache_file', None)
            if cache_file:
                cache_file = os.path.abspath(cache_file)

            input_kwargs = dict(
                prompt_file=self.prompt_file,
                answer_file_list=target_answers,
                baseline_file=baseline_file,
                reference_file=reference_file,
                review_file=self.review_file,
                reviewer_args=reviewer_args,
                cache_file=cache_file)
            reviewer_obj = reviewer_cls(**input_kwargs)

            reviewer_obj.run()
            logger.info(f'Reviews generated by reviewer '
                        f'are saved to {self.review_file}.')

        else:
            logger.warning(
                'Skip reviews generation because it is not enabled.')

    def get_rating_results(self):
        enable = self.rating_gen.get(EvalTaskConfig.ENABLE, True)
        if enable:
            report_file = os.path.abspath(self.rating_gen.get('report_file'))
            metrics = self.rating_gen.get('metrics', ['elo'])
            baseline_model = self.rating_gen.get(
                'baseline_model') if metrics[0] == 'pairwise' else None
            ae = RatingEvaluate(metrics=metrics, baseline_model=baseline_model)
            res_list = ae.run(self.review_file)
            rating_df = res_list[0]
            logger.info(f'Rating results:\n{rating_df}')
            rating_df.to_csv(report_file, index=True)
            logger.info(f'Rating results are saved to {report_file}.')
        else:
            logger.warning('Skip rating because it is not enabled.')

    def run(self):

        # Get all answers
        self.get_answers()

        # Get all reviews
        self.get_reviews()

        # Get rating results
        self.get_rating_results()

        logger.info('*** Arena workflow is finished. ***')


def main():

    # Usage: python run_arena.py -c /path/to/xxx_cfg_arena.yaml
    parser = argparse.ArgumentParser(
        description='LLMs evaluations with arena mode.')
    parser.add_argument(
        '-c', '--cfg-file', default='llmuses/registry/tasks/cfg_arena.yaml')
    args = parser.parse_args()
    logger.info(f'Config file: {args.cfg_file}')

    arena_workflow = ArenaWorkflow(cfg_file=args.cfg_file)
    arena_workflow.run()


if __name__ == '__main__':
    main()
